@page "/clientes"
@using System.Linq.Dynamic.Core
@inject IHttpRepository HttpRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IToastNotificationService ToastNotificationService 
@attribute [Authorize]

<div class="row justify-content-between align-items-center">
	<div class="col-auto">
		<h2 class="card-title text-radzen-secondary">Clientes</h2>
	</div>
	<div class="col-auto">
		<RadzenButton Icon="add" Text="Registrar Cliente" Click="@(() => NavigationManager.NavigateTo("clientes/crear"))">
		</RadzenButton>
	</div>
</div>

<div class="row mt-4">
	<div class="col-12 text-right">
		<RadzenDropDown AllowClear="false" Placeholder="10" TValue="int" Data="@(new List<int> {10, 25, 50, 100})" Change="@OnDropDownChange" />
	</div>
	<div class="col-12">
		<ListadoGenerico Listado="@_clientesDto">
			<HayRegistrosCompleto>
				<RadzenGrid @ref="_dataGrid" Count="@_totalCount" Data="@_clientesDto" LoadData="@((e) => LoadData(e, _dataGrid.CurrentPage))" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="@_pageSize" AllowSorting="true" TItem="ClienteDto">
					<Columns>
						<RadzenGridColumn TItem="ClienteDto" Property="Nombres" Title="Nombres" />
						<RadzenGridColumn TItem="ClienteDto" Property="Apellidos" Title="Apellidos" />
						<RadzenGridColumn TItem="ClienteDto" Property="Cedula" Title="Cédula" />
						<RadzenGridColumn TItem="ClienteDto" Property="PhoneNumber" Title="Teléfono" />
						<RadzenGridColumn TItem="ClienteDto" Context="cliente" Filterable="false" Sortable="false" TextAlign="@TextAlign.Center" Width="70px">
							<Template>
								<RadzenButton Icon="edit" Click="@(() => NavigationManager.NavigateTo($"/clientes/editar/{cliente.Id}"))"></RadzenButton>
							</Template>
						</RadzenGridColumn>
						<RadzenGridColumn TItem="ClienteDto" Context="cliente" Filterable="false" Sortable="false" TextAlign="@TextAlign.Center" Width="70px">
							<Template>
								<RadzenButton Icon="delete" ButtonStyle="@ButtonStyle.Danger" Click="@(() => BorrarCliente(cliente.Id))"></RadzenButton>
							</Template>
						</RadzenGridColumn>
					</Columns>
				</RadzenGrid>
			</HayRegistrosCompleto>
		</ListadoGenerico>
	</div>
</div>

@code {
    private List<ClienteDto> _clientesDto;
    private int _pageSize;
    private int _totalCount;
    private int _currentPage;
    private RadzenGrid<ClienteDto> _dataGrid;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData(LoadDataArgs args = null, int pageIndex = 0, int pageSize = 10)
    {
        var url = $"api/clientes?pageIndex={pageIndex}&pageSize={pageSize}";

        var response = await HttpRepository.Get<ApiResponseDto<ClienteDto>>(url);

        if (response.Error)
        {
            await JsRuntime.ToastrFailure(await response.GetResponseBody());;
        }
        else
        {
            _clientesDto = response.Response.DataResult;
            _pageSize = response.Response.PageSize;
            _totalCount = response.Response.TotalCount;
            _currentPage = response.Response.PageIndex;

            if (args is not null)
            {
                var query = _clientesDto.AsQueryable();

                if (!string.IsNullOrEmpty(args.Filter))
                {
                    query = query.Where(args.Filter);
                }

                if (!string.IsNullOrEmpty(args.OrderBy))
                {
                    query = query.OrderBy(args.OrderBy);
                }

                _clientesDto = query.ToList();

                await InvokeAsync(StateHasChanged);
            }
        }

    }

    private async Task OnDropDownChange(object value)
    {
        _pageSize = (int)value;
        await LoadData(null, 0, _pageSize);
        _dataGrid.GoToPage(0);
    }

    private async Task BorrarCliente(int clienteId)
    {
        try
        {
            var result = await JsRuntime.SwalConfirmation("¿Está seguro de borrar este cliente?");

            if (result)
            {
                var deletedResponse = await HttpRepository.Delete<DataResponse<string>>($"api/clientes/{clienteId}");

                if (deletedResponse.Error)
                {
                    ToastNotificationService.ShowError(deletedResponse.Response.Message);
                }
                else
                {
                    _dataGrid.Reload();
                    ToastNotificationService.ShowError("Cliente " + deletedResponse.Response.Message);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}